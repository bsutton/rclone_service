#! /usr/bin/env dcli

///
/// Installs and starts/stops rclone as a service.
///
/// Based on:
/// https://gist.github.com/kabili207/2cd2d637e5c7617411a666d8d7e97101
///
import 'package:args/command_runner.dart';
import 'package:dcli/dcli.dart';
import 'package:rclone/src/commands/install.dart';
import 'package:rclone/src/commands/start.dart';
import 'package:rclone/src/commands/stop.dart';
import 'package:rclone/src/exit_exception.dart';

/// dcli script generated by:
/// dcli create %scriptname%
///
/// See
/// https://pub.dev/packages/dcli#-installing-tab-
///
/// For details on installing dcli.
///
void main(List<String> args) async {
  final parser = CommandRunner<int>(
      'rclone_service', 'Install and Start rclone as a service.')
    ..addCommand(StartCommand())
    ..addCommand(StopCommand())
    ..addCommand(InstallCommand());

  try {
    await parser.run(args);
  } on FormatException catch (e) {
    printerr(red('Invalid args: ${e.message}'));
    printUsage(parser);
  } on ExitException catch (e) {
    printerr(red(e.message));

    printUsage(parser);
  }
}

void printUsage(CommandRunner<int> parser) {
  print('''
Usage: 
${parser.usage}
''');
}
